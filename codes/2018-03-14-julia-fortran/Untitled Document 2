module julia_arr2
    use iso_c_binding
    implicit none
    contains

    subroutine mul3(n, x, y) bind(c, name="mul3a")
        integer, intent(in) :: n
        real(c_double), dimension(n), intent(in) :: x
        real(c_double), dimension(n), intent(out) :: y
        integer :: i
        do i=1,n
            y(i) = 3*x(i)
            write(*,*) x(i)*y(i)
        end do
    end subroutine mul3

    subroutine dot(n, x, y, a) bind(c, name="dot")
        integer, intent(in) :: n
        real(c_double), dimension(n), intent(in) :: x, y
        real(c_double), intent (out) :: a
        integer :: i
        a = 0
        do i=1, n
            a  = a + x(i)*y(i)
            write(*,*) x(i)*y(i)
            write(*,*) a
        end do
    end subroutine dot

    subroutine pdot(n, x, y, a) bind(c, name="pdot")
        integer, intent(in) :: n
        real(c_double), dimension(n), intent(in) :: x, y
        real(c_double), intent (out) :: a
        integer :: i
        a = 0
        !$OMP PARALLEL DO DEFAULT(SHARED) PRIVATE(i,n) REDUCTION(+:a)
        do i=1, n
            a  = a + x(i)*y(i)
            write(*,*) x(i)*y(i)
        end do
        !$OMP END PARALLEL DO
    end subroutine pdot

    ! pure can only be used when no paralelization is used
    !pure real(c_double) function pdotfun(n, x, y) bind(c, name="pdotfun")
    real(c_double) function pdotfun(n, x, y) bind(c, name="pdotfun")
        integer, intent(in) :: n
        real(c_double), dimension(n), intent(in) :: x, y
        real(c_double) :: a
        integer :: i
        a = 0
        !$OMP PARALLEL DO DEFAULT(SHARED) PRIVATE(i,n) REDUCTION(+:a)
        do i=1, n
            a  = a + x(i)*y(i)
        end do
        !$OMP END PARALLEL DO
        pdotfun = a
    end function pdotfun

end module julia_arr2
